* Core
** DONE handle errors in verifications
   Catch conditions that accure during verification
   and generate a verification result that has nice information about what accured

** FEATURE filter verifications by meta data
   Add a possibility to exclude/include verifications based on meta data.
   There should be two ways to configure filters
   1) via a paramater
   2) environment variables
** FEATURE quickcheck output
   Add information about how much iterations it took to find a falsification
** DONE integrate quickcheck-like verification
   Establish a means to run verifications against values generated by a generator stream
   It can probably look something like this:

   (quickcheck (subject (some-generator-expression))
     (verify subject verifier))

   It would not notify success for every succeeded verification but collect all
   results and display all failures. It would pick the very first failure for
   each failed verifier and display only these.

   There should be a parameter to configure the amount of samples used per
   verification run

** FEATURE add FAILURE
   Instead of ID for failures write FAILURE. This is easily grepable

** FEATURE test functions
   Add a way to create test-functions that hold verifications
   The result would be a list of all verification results in that function
   This enables reuse of test-code. You can execute the functions inside the repl
   selectively and still run all functions when used with console-output.
   (define-test name meta
      (verfiy ...)) ;=> (define (name) (meta meta (collect-results (verify ...))))

   Additionally one could provide a function
   (run-tests modulename #!optional filter) that would run all functions in module that satisfy filter.
   This would make it easy to reuse tests in the repl and elsewhere

** FEATURE rethink quick-check interface
   See clojure's test-generative
   Maybe provide (with-generators iterations ((var1 gen)
                                              (var2 gen))
                   (verify ...)) ; => (list-of-verification-results)

   (define-test (name bindings) body ...)
   (name iterations) ;=> (list-of-verificition-results)
   The metadata would hold the number of iterations and the value that made it fail

** FEATURE add timing information
   - add information about the runtime of tests to the result

* Verifiers

* Reporter
** Console
*** DONE add tests for console reporter
*** FEATURE add output for tags
    in documentation style add output for tags:
    description ..................................... [tag1,tag2]

* Ideas
** Add org outputter?
   Add an outputter that generates an org file. Would that be useful, maybe with an outputter that writes to an emacs buffer?
   Maybe the documentation outputter could just use org syntax, at least general org-syntax
